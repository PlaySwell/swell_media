- asset = SwellMedia::Asset.new


- if !asset.try(:uploader) || args[:submit]
	= form_for asset, :html => {:multipart => true} do |f|
		= f.hidden_field :parent_obj_id, value: object.id
		= f.hidden_field :parent_obj_type, value: object.class.base_class.name.to_s
		= f.file_field :uploader
		= f.hidden_field :uploader_cache
		- if args[:asset]
			- args[:asset].each do |attribute, value|
				= f.hidden_field attribute.to_sym, value: value
		= f.submit 'Upload'

- elsif asset.try(:uploader)
	- filename = asset.uploader.construct_new_file_name( args[:extension] )
	- asset.uploader.key = "#{asset.uploader.store_dir}#{filename}"
	- asset.uploader.success_action_redirect = swell_media.callback_create_assets_url( { redirect_to: args[:redirect_to], async: (args[:async] ? 1 : nil), 'asset[parent_obj_id]' => object.id, 'asset[parent_obj_type]' => object.class.base_class.name.to_s, :host => args[:host] }.merge( Hash[( args[:asset] || {} ).map{ |k, v| ["asset[#{k.to_s}]", v] }] ) )

	- if args[:async]
		= direct_upload_form_for asset.uploader, html: (args[:html] || {}).merge( { target: filename, id: args[:id] } ) do |f|
			= f.file_field :upload
			= f.submit 'Upload'
		%iframe{ id: filename, name: filename, style: 'height:0;width:0;border:0;' }
	- else
		= direct_upload_form_for asset.uploader, html: (args[:html] || {}).merge( { id: args[:id] } ) do |f|
			= f.file_field :upload
			= f.submit 'Upload'
